<?php
namespace Drahak\Restful\DI;

use Drahak\Restful\Application\MethodAnnotation;
use Drahak\Restful\Application\Routes\ResourceRoute;
use Drahak\Restful\Application\Routes\ResourceRouteList;
use Drahak\Restful\IResourceRouter;
use Nette\Caching\Storages\FileStorage;
use Nette\Config\CompilerExtension;
use Nette\Config\Configurator;
use Nette\Diagnostics\Debugger;
use Nette\Loaders\RobotLoader;

/**
 * Drahak\Restful Extension
 * @package Drahak\Restful\DI
 * @author Drahomír Hanák
 */
class RestExtension extends CompilerExtension
{

    /**
     * Default DI settings
     * @var array
     */
    protected $defaults = array(
        'cacheDir' => '%tempDir%/cache',
        'routes' => array(
            'presentersRoot' => '%appDir%',
            'autoGenerated' => TRUE,
            'module' => '',
			'panel' => TRUE
        )
    );

    /**
     * Load DI configuration
     */
    public function loadConfiguration()
    {
        $container = $this->getContainerBuilder();
        $config = $this->getConfig($this->defaults);

        $container->addDefinition($this->prefix('responseFactory'))
            ->setClass('Drahak\Api\ResponseFactory');

        $container->addDefinition($this->prefix('resourceFactory'))
            ->setClass('Drahak\Api\ResourceFactory');

        // Generate routes from presenter annotations
        if ($config['routes']['autoGenerated']) {
            $container->addDefinition($this->prefix('routeListFactory'))
                ->setClass('Drahak\Api\Application\Routes\RouteListFactory')
                ->setArguments(array($config['routes']));

            $container->getDefinition('router')
                ->addSetup('@rest.routeListFactory::addRoutes', '@self');
        }

		// Create resource routes debugger panel
		if ($config['routes']['panel']) {
			$container->addDefinition($this->prefix('panel'))
				->setClass('Drahak\Api\Diagnostics\ResourceRouterPanel')
				->addSetup('Nette\Diagnostics\Debugger::$bar->addPanel(?)', array('@self'));

			$container->getDefinition('application')
				->addSetup('$service->onStartup[] = ?', array(array($this->prefix('@panel'), 'getTab')));
		}
    }


    /**
     * Register REST API extension
     * @param Configurator $configurator
     */
    public static function install(Configurator $configurator)
    {
        $configurator->onCompile[] = function($configurator, $compiler) {
            $compiler->addExtension('rest', new RestExtension);
        };
    }

}